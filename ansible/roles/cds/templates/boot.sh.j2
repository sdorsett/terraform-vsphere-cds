#!/bin/bash
cd /home/ubuntu/cds 
curl https://raw.githubusercontent.com/ovh/cds/master/docker-compose.yml -o docker-compose.yml
export HOSTNAME=$(hostname)

# Get the latest version
docker pull ovhcom/cds-engine:latest

# Create PostgreSQL database, redis and elasticsearch
docker-compose up --no-recreate -d cds-db cds-cache elasticsearch dockerhost

# check if database is up, the logs must contain "LOG: database system is ready to accept connections"
docker-compose logs| grep 'database system is ready to accept connections'
# you should have this line after few seconds: cds-db_1 | LOG:  database system is ready to accept connections

docker-compose up --no-recreate cds-migrate
# You should have this log: "cdstest_cds-migrate_1 exited with code 0"

# prepare initial configuration.
docker-compose up cds-prepare

# disable the smtp server
export CDS_EDIT_CONFIG="api.smtp.disable=true"
docker-compose up cds-edit-config

# run API
docker-compose up -d cds-api

# the INIT_TOKEN variable will be used by cdsctl to create first admin user
TOKEN_CMD=$(docker logs cds_cds-prepare_1|grep TOKEN) && $TOKEN_CMD
# if you have this error:  "command too long: export INIT_TOKEN=....",
# you can manually execute the command "export INIT_TOKEN=...."

# create user
curl 'http://localhost:8081/download/cdsctl/linux/amd64?variant=nokeychain' -o cdsctl
# on OSX: curl 'http://localhost:8081/download/cdsctl/darwin/amd64?variant=nokeychain' -o cdsctl
chmod +x cdsctl
./cdsctl signup --api-url http://localhost:8081 --email admin@localhost.local --username admin --fullname admin --password {{ cds_admin_password }}

# verify the user
VERIFY_CMD=$(docker-compose logs cds-api|grep 'cdsctl signup verify'|cut -d '$' -f2|xargs) && ./$VERIFY_CMD --context default
# if you have this error:  "such file or directory: ./cdsctl signup verify --api-url...",
# you can manually execute the command "./cdsctl signup verify --api-url..."

# run cdsctl
./cdsctl user me

cp /root/.cdsrc /home/ubuntu/.cdsrc
chmod 644 /home/ubuntu/.cdsrc
chown ubuntu:ubuntu /home/ubuntu/.cdsrc

# run others services
docker-compose up -d cds-ui cds-hooks cds-elasticsearch cds-hatchery-local
